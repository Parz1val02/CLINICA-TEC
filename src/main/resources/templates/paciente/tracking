<!--<div>
<script th:inline="javascript">
  $(document).ready(function () {

    $('#zona').on('change', function () {
      set_map($(this).val());
    });
    var map = L.map('map')

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);
    ;
    var marker;

    function set_map(value){
      /*<![CDATA[*/
      var listaSedes = /*/*[[${listaSedes}]]*/*/ [];

      // Iterar sobre la lista de zonas
      listaSedes.forEach(function(zona) {
        if(value === /*/*[[${zona.id}]]*/*/ ) {
          var latitud = /*/*[[${zona.latitud}]]*/*/;
          var longitud = /*/*[[${zona.longitud}]]*/*/;
          var nombre = /*/*[[${zona.nombre}]]*/*/;
        }
        // Realizar otras operaciones con los atributos de la zona
        console.log("Latitud: " + latitud + ", Longitud: " + longitud + ", Nombre: " + nombre);
      });

      map.setView([latitud, longitud], 30);

      if (marker) {
        marker.setLatLng([latitud, longitud])
                .bindPopup(nombre)
                .openPopup();
      } else {
        marker = L.marker([latitud, longitud]).addTo(map)
                .bindPopup(nombre)
                .openPopup();
      }
    }
    /*]]>*/
    set_map($('#zona').val())
  });
</script>

</div> -->

<script th:inline="javascript">
    $(document).ready(function () {
        $('#zona').on('change', function () {
            set_map($(this).val());
        });
        var map = L.map('map')

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
    })

</script>
$(document).ready(function () {
        $('#zona').on('change', function () {
            set_map($(this).val());
        });
        var map = L.map('map')

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        ;
        var marker,sede,ruta,tiempo,latitudActual,longitudActual;


        function set_map() {

            /*<![CDATA[*/
            sede = [[${sede}]];
            ruta = [[${ruta}]];
            latitudActual = [[${delivery.latitudActual}]];
            longitudActual = [[${delivery.longitudActual}]];
            var tiempoStr = [[${tiempo}]]; // Reemplaza esto con el valor de tiempo que tienes

            tiempo = parseInt(tiempoStr); // Extrae el valor numérico de la cadena

            console.log(tiempo); // Imprime el tiempo en minutos
            console.log(ruta);

            var latitud, longitud, nombre;
            longitud = sede.longitud;
            latitud = sede.latitud;
            nombre = sede.nombre;
            console.log("Latitud: " + latitud + ", Longitud: " + longitud + ", Nombre: " + nombre);
            map.setView([latitud, longitud], 30);
            if (marker) {
                marker.setLatLng([latitud, longitud])
                    .bindPopup("Delivery")
                    .openPopup();
            } else {
                marker = L.marker([latitud, longitud]).addTo(map)
                    .bindPopup("Delivery")
                    .openPopup();
            }

            var rutaOptimaCodificada = ruta; // Reemplaza con la ruta óptima codificada que tienes

            // Decodifica la representación codificada de la ruta óptima
            var coordenadas = decodePolyline(rutaOptimaCodificada);

            // Función para decodificar una cadena codificada en formato polyline
            function decodePolyline(encoded) {
                var index = 0;
                var len = encoded.length;
                var lat = 0;
                var lng = 0;
                var coordinates = [];

                while (index < len) {
                    var b;
                    var shift = 0;
                    var result = 0;

                    do {
                        b = encoded.charCodeAt(index++) - 63;
                        result |= (b & 0x1f) << shift;
                        shift += 5;
                    } while (b >= 0x20);

                    var dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
                    lat += dlat;

                    shift = 0;
                    result = 0;

                    do {
                        b = encoded.charCodeAt(index++) - 63;
                        result |= (b & 0x1f) << shift;
                        shift += 5;
                    } while (b >= 0x20);

                    var dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
                    lng += dlng;

                    var latlng = [lat * 1e-5, lng * 1e-5];
                    coordinates.push(latlng);
                }

                return coordinates;
            }

            console.log("coordinates: "+ coordenadas)

            // Crea una polilínea con las coordenadas decodificadas y agrega al mapa
            var polyline = L.polyline(coordenadas, {color: 'red'}).addTo(map);

            var tiempoTotal = tiempo * 60; // Convierte el tiempo a segundos

            console.log("time: " + tiempoTotal)

            function calculateDistance(coordinates) {
                var distance = 0;

                for (var i = 0; i < coordinates.length - 1; i++) {
                    var lat1 = coordinates[i][0];
                    var lon1 = coordinates[i][1];
                    var lat2 = coordinates[i + 1][0];
                    var lon2 = coordinates[i + 1][1];

                    var p = 0.017453292519943295;    // Math.PI / 180
                    var c = Math.cos;
                    var a = 0.5 - c((lat2 - lat1) * p) / 2 + c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p)) / 2;
                    var d = 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km

                    distance += d;
                }

                return distance;
            }

            var distanciaTotalInicial = calculateDistance(coordenadas); // Obtiene la distancia total de la ruta
            console.log("distancia: "+distanciaTotalInicial)

            var velocidad = distanciaTotalInicial / tiempoTotal; // Calcula la velocidad CONSTANTE necesaria para completar la ruta en el tiempo especificado
            console.log("velocidad: " +velocidad)

            var distanciaRecorrida = 0;
            var tiempoTranscurrido = 0;

            var interval = setInterval(function() {
                if (distanciaRecorrida >= distanciaTotalInicial) {
                    clearInterval(interval); // Detiene la actualización cuando se ha completado la ruta
                }
                else{
                    var porcentajeRecorrido = distanciaRecorrida / distanciaTotalInicial;
                    console.log("porcentaje"+ porcentajeRecorrido)
                    var punto = L.GeometryUtil.interpolateOnLine(map, polyline, porcentajeRecorrido); // Obtiene el punto en el porcentaje del recorrido
                    marker.setLatLng(punto.latLng); // Actualiza la posición del marcador en el mapa
                    console.log(punto.latLng)
                    distanciaRecorrida += velocidad;
                    tiempoTranscurrido += 1000; // Intervalo de actualización en milisegundos
                    console.log("tiempo: "+ tiempoTranscurrido)

                    // Obtén la latitud y longitud actuales
                    var latitud = punto.latLng.lat;
                    var longitud = punto.latLng.lng;

                    // Crea un objeto de datos para enviar al servidor

                    console.log('Latitud actual: ' + latitud);
                    console.log('Longitud actual: ' + longitud);

                    $.ajax({
                        type: 'POST',
                        url: 'http://localhost:8081/api/guardarUbicacion', // Reemplaza con la URL de tu endpoint en el servidor Java
                        data:{
                            latitud: latitud,
                            longitud: longitud
                        },
                        success: function(response) {
                            console.log(response); // Deberías recibir la respuesta del servidor en la consola
                        },
                        error: function(error) {
                            console.error('Error:', error);
                        }
                    });
                }

            }, 1000); // Intervalo de actualización en milisegundos
        }
        set_map()

        /*]]>*/
    });